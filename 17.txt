前情回顾

1. ftp 文件服务器

   多线程并发模型

   * 思考过程
   * 请求应答机制

2. IO模型

   IO密集 ：  消耗cpu比较少，运行速度比较慢，容易出现阻塞

   cpu密集： 消耗cpu多，运行速度快，没有阻塞


   io模型： 阻塞IO

   非阻塞IO ： 让io不阻塞

              sockfd.setblocking()
              sockfd.settimeout()

3. IO多路复用

   select
   poll
   epoll

文件描述符：操作系统给每个IO对象提供一个 >= 0的整数编号，这个编号
就叫做文件描述符 fileno.  系统中所有IO对象的文件描述符不重复

对比三种IO多路复用方法：

select ： 支持操作系统最多   最多监控1024个IO   效率一般
poll  ： 支持 Linux  unix    监控IO没有限制  效率一般
epoll ： 支持 Linux     监控IO没有限制   效率最高

水平出发： 当IO对象有事件发生会一直提醒，直到处理了为止
边缘出发： 当IO对象有事件发生只提醒一次，如果不处理则不再重复提醒，
          直到这个IO对象又有事件发生再一起处理


功能类的设计：
1. 明确类要实现什么功能
   多个步骤实现
   分情况讨论实现

2. 这个类使用者需要怎么用
   实例化对象 （自动实现一些属性的设置和配置）
   通过对象有序的调用一些方法实现某些功能

3. 在满足功能时，那些是我能够替使用者决定的，那些是使用者必须自己决定的
   尽量让使用者变得简单 （继承 重写 多态）
   不能替用户决定的用户自己决定 （传参，设置配置文件）


4. 如何设定属性和拆分方法
    属性在哪设置
    拆分功能


作业 ： 1. IO多路复用对比总结
       2. 记熟练 http 请求和响应的格式，以及每部分作用
           请求行 GET POST
           响应  200 404
       3. 注册一个账号  github.com




